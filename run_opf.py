from utils.create_net import create_network
from utils.opf import opf_model
from utils.plot_res import plot_optimization_results
import yaml
import os
import logging
import pickle

# Set up logging directory and file
log_dir = "logs/run_opf_logs"
os.makedirs(log_dir, exist_ok=True)
log_file_path = os.path.join(log_dir, "run_opf_log.txt")

# Configure the logger
run_opf_logger = logging.getLogger('RunOPFLogger')
run_opf_logger.setLevel(logging.INFO)

formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

# File handler
file_handler = logging.FileHandler(log_file_path, mode='w')
file_handler.setFormatter(formatter)
run_opf_logger.addHandler(file_handler)

# Stream handler (optional, if you want to see logs in the console)
stream_handler = logging.StreamHandler()
stream_handler.setFormatter(formatter)
run_opf_logger.addHandler(stream_handler)

# load env args
with open("./madrl/args/env_args/flex_provision.yaml", "r") as f:
    env_config_dict = yaml.safe_load(f)["env_args"]

# Load the network data
network_data = create_network()

# Load the test record (pickle file) generated by test_agent.py
with open('test_record_flex_provision-maddpg_day730.pickle', 'rb') as f:
    test_record = pickle.load(f)

# Extract relevant data from the test record
pv_active = test_record['pv_active']  # (96, 5)
bus_active = test_record['bus_active']  # (96, 33)
bus_reactive = test_record['bus_reactive']  # (96, 33)
ess_energy = test_record['ess_energy']  # (96, 5)
price = test_record['price']  # (96, 1, 1)

# Prepare the data for OPF inputs

# Convert the list of arrays to match the required input format
flex_price = {t+1: price[t][0][0] for t in range(env_config_dict['episode_limit'])}

# Active and reactive power demands for each node
active_power_demand = {
    n: [bus_active[t][i] for t in range(env_config_dict['episode_limit'])]
    for i, n in enumerate(network_data['bus_numbers'])
}

reactive_power_demand = {
    n: [bus_reactive[t][i] for t in range(env_config_dict['episode_limit'])]
    for i, n in enumerate(network_data['bus_numbers'])
}

# PV active power data
pv_active_power = {
    g: [pv_active[t][i] for t in range(env_config_dict['episode_limit'])]
    for i, g in enumerate(network_data['PVs_at_buildings'])
}

# Initial ESS energy 
initial_ess_energy = {k: ess_energy[0][i] for i, k in enumerate(network_data['ESSs_at_buildings'])}

results = opf_model(network_data, flex_price, active_power_demand, reactive_power_demand, pv_active_power, initial_ess_energy)

run_opf_logger.info('Optimization results: %s', results)

plot_optimization_results(results)